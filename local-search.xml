<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/07/github%E5%BC%80%E6%BA%90ocr%E7%A5%9E%E5%99%A8/"/>
    <url>/2023/12/07/github%E5%BC%80%E6%BA%90ocr%E7%A5%9E%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>这篇文章给大家推荐一款免费，开源，可批量的离线OCR软件。</p><p><img src="https://files.mdnice.com/user/46581/ee5ba438-0579-4cf4-81c4-13ba5532b826.png"></p><h2 id="1-Umi-OCR-简介"><a href="#1-Umi-OCR-简介" class="headerlink" title="1 Umi-OCR 简介"></a>1 Umi-OCR 简介</h2><ul><li>免费：本项目所有代码开源，完全免费。</li><li>方便：解压即用，离线运行，无需网络。</li><li>批量：可批量导入处理图片，结果保存到本地 txt &#x2F; md &#x2F; jsonl 多种格式文件。也可以即时截屏识别。</li><li>高效：采用 PaddleOCR-json C++ 识别引擎。只要电脑性能足够，通常比在线OCR服务更快。</li><li>精准：默认使用PPOCR-v3模型库。除了能准确辨认常规文字，对手写、方向不正、杂乱背景等情景也有不错的识别率。可设置忽略区域排除水印、设置文块后处理合并排版段落，得到规整的文本。</li></ul><p><img src="https://files.mdnice.com/user/46581/ee46a2c4-624f-44f7-be2e-206c3153e7e6.png"></p><p><img src="https://files.mdnice.com/user/46581/b6e8a0b5-6714-4369-bc43-494c99977220.png"></p><h2 id="2-支持功能"><a href="#2-支持功能" class="headerlink" title="2 支持功能"></a>2 支持功能</h2><ul><li>简单上手 截图、批量识别~</li><li>排版优化 如何合并一个自然段内的文字？</li><li>忽略区域 如何排除截图水印处的文字？</li><li>多国语言 添加更多PP-OCR支持的语言模型库！</li><li>命令行调用 用命令行或第三方工具来调用Umi-OCR！</li><li>联动翻译软件 截图OCR后发送指定按键，触发翻译软件进行翻译</li><li>更多小技巧</li><li>问题排除 无法启动引擎 &#x2F; 多屏幕截图异常 ？</li></ul><h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><p>访问如下链接去安装</p><blockquote><p><a href="https://github.com/hiroi-sora/Umi-OCR/releases/tag/v1.3.5">https://github.com/hiroi-sora/Umi-OCR/releases/tag/v1.3.5</a></p></blockquote><h2 id="4、实践使用"><a href="#4、实践使用" class="headerlink" title="4、实践使用"></a>4、实践使用</h2><ul><li>截图识别<br>点击截图按钮或自定义快捷键，唤起截图识别。</li></ul><p><img src="https://files.mdnice.com/user/46581/addbcff8-d975-43d6-8ff8-6819cf1be6cf.png"><br>v1.3.4 还可以设置截图后生成一个预览窗口。预览窗口可以被钉在屏幕顶层，或调为半透明，方便对比查看。</p><ul><li>粘贴图片到软件<br>在任何地方（如文件管理器，网页，微信）复制图片，软件上点击粘贴按钮或快捷键，自动识别</li></ul><p><img src="https://files.mdnice.com/user/46581/1c3ca018-c338-420f-8b82-c7d87dd2f682.png"></p><ul><li>批量识别本地图片文件<br>将图片或文件夹拖进软件，批量转换文字。也可以点击按钮打开浏览窗口导入。</li></ul><p>识别结果将保存到本地。可选生成纯文本txt文件、带链接Markdown文件、原始信息jsonl文件等不同格式。可配置任务完成后执行关机&#x2F;待机。</p><p><img src="https://files.mdnice.com/user/46581/3a589783-846a-4bff-85dc-c494f1fbc9fe.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 node_exporter 和 Prometheus 监控 Linux 主机上账户密码的过期时间</title>
    <link href="/2023/12/06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-node-exporter-%E5%92%8C-Prometheus-%E7%9B%91%E6%8E%A7-Linux-%E4%B8%BB%E6%9C%BA%E4%B8%8A%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <url>/2023/12/06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-node-exporter-%E5%92%8C-Prometheus-%E7%9B%91%E6%8E%A7-Linux-%E4%B8%BB%E6%9C%BA%E4%B8%8A%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>最近安全基线修改了生产所有用户密码的过期时间，但devops中应用部署用户如果过期的话会影响到实际部署。</p><p>另外就是最近发现青藤云agent在root密码过期的情况下也会发生定时任务执行失败，无法拉起agent进程的情况。</p><p>基于上述就想着监控下用户过期时间，看了下目前node_exporter并没有相关的监控项，就想着搞一下，如果有其它的监控项，也可以如此做。</p><p>告警效果图：</p><p><img src="https://files.mdnice.com/user/46581/2475f2c2-8f83-4388-860e-33d0a2701290.png"></p><h2 id="如何使用-node-exporter-和-Prometheus-监控-Linux-主机上账户密码的过期时间"><a href="#如何使用-node-exporter-和-Prometheus-监控-Linux-主机上账户密码的过期时间" class="headerlink" title="如何使用 node_exporter 和 Prometheus 监控 Linux 主机上账户密码的过期时间"></a>如何使用 node_exporter 和 Prometheus 监控 Linux 主机上账户密码的过期时间</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Linux 系统中，每个账户都有一个过期日期，表示该账户在什么时候会失效，无法再登录系统。这个过期日期可以通过 <code>chage</code> 命令来查看或修改。例如，如果想要查看账户名为 user 的过期日期，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chage -l user<br></code></pre></td></tr></table></figure><p>输出结果类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Last password change                                    : Apr 01, 2023<br>Password expires                                        : Feb 28, 2024<br>Password inactive                                       : never<br>Account expires                                         : Apr 30, 2023<br>Minimum number of days between password change          : 0<br>Maximum number of days between password change          : 99999<br>Number of days of warning before password expires       : 7<br></code></pre></td></tr></table></figure><p>其中，<code>Password expires</code> 项就是账户的过期日期，如果为 <code>never</code>，表示该账户永不过期。</p><p>监控 Linux 主机上账户的过期时间，可以帮助我们及时发现和处理一些潜在的安全风险，比如及时删除或禁用一些不再使用的账户，或者提醒一些即将过期的账户及时续期，以免影响正常的业务运行。</p><p>本文将介绍如何使用 node_exporter 和 Prometheus 来监控 Linux 主机上账户的过期时间，并实现可视化和告警的功能。</p><h3 id="node-exporter-简介"><a href="#node-exporter-简介" class="headerlink" title="node_exporter 简介"></a>node_exporter 简介</h3><p>node_exporter 是一个用于暴露 *NIX 主机指标的 Exporter，比如采集 CPU、内存、磁盘等信息。它是 Prometheus 生态中的一个重要组件，可以让 Prometheus 通过 HTTP 接口来抓取主机的各种指标数据，然后进行分析、展示和告警。</p><p>node_exporter 支持使用 textfile 收集器来添加用户自定义的度量指标，只要将度量指标和值按照 Prometheus 规范的格式输出到指定位置且以 .prom 后缀文件保存，textfile 收集器会自动读取指定目录下所有以 .prom 结尾的文件，并提取所有格式为 Prometheus 的指标暴露给 Prometheus 来抓取。</p><h3 id="配置-node-exporter"><a href="#配置-node-exporter" class="headerlink" title="配置 node_exporter"></a>配置 node_exporter</h3><p>如果已经现有nide_exporter的话，可以直接使用</p><p>为了使用 node_exporter 来监控 Linux 主机上账户的过期时间，我们需要做以下几个步骤：</p><ul><li>下载并安装 node_exporter</li><li>编写一个脚本来获取账户的过期时间，并将其写入到 .prom 文件中</li><li>配置 node_exporter 的 textfile 收集器</li><li>启动 node_exporter</li></ul><h4 id="下载并安装-node-exporter"><a href="#下载并安装-node-exporter" class="headerlink" title="下载并安装 node_exporter"></a>下载并安装 node_exporter</h4><p>首先，我们需要从官方网站下载 node_exporter 的二进制文件，根据我们的操作系统和架构选择合适的版本。例如，如果我们的系统是 Linux x86_64，可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 node_exporter 1.2.2 版本</span><br>wget https://github.com/prometheus/node_exporter/releases/download/v1.2.2/node_exporter-1.2.2.linux-amd64.tar.gz<br><span class="hljs-comment"># 解压文件</span><br>tar xvfz node_exporter-1.2.2.linux-amd64.tar.gz<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> node_exporter-1.2.2.linux-amd64<br></code></pre></td></tr></table></figure><p>然后，我们可以将 node_exporter 的二进制文件复制到 <code>/usr/local/bin</code> 目录下，方便执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 复制文件</span><br>sudo <span class="hljs-built_in">cp</span> node_exporter /usr/local/bin<br><span class="hljs-comment"># 赋予执行权限</span><br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/node_exporter<br></code></pre></td></tr></table></figure><h4 id="编写一个脚本来获取账户的过期时间，并将其写入到-prom-文件中"><a href="#编写一个脚本来获取账户的过期时间，并将其写入到-prom-文件中" class="headerlink" title="编写一个脚本来获取账户的过期时间，并将其写入到 .prom 文件中"></a>编写一个脚本来获取账户的过期时间，并将其写入到 .prom 文件中</h4><p>接下来，我们需要编写一个脚本来获取账户的过期时间，并将其写入到 .prom 文件中，供 node_exporter 的 textfile 收集器读取。我们可以使用任何我们熟悉的编程语言来编写这个脚本，只要保证输出的格式符合 Prometheus 的规范。例如，我们可以使用 bash 来编写这个脚本，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 定义一个用户列表，用空格分隔</span><br>user_list=<span class="hljs-string">&quot;user1 user2 user3&quot;</span><br><span class="hljs-comment"># 定义一个输出文件的路径</span><br>output_file=<span class="hljs-string">&quot;/var/lib/node_exporter/user_expire.prom&quot;</span><br><span class="hljs-comment"># 清空输出文件的内容</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; <span class="hljs-variable">$output_file</span><br><span class="hljs-comment"># 遍历用户列表</span><br><span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> <span class="hljs-variable">$user_list</span>; <span class="hljs-keyword">do</span><br>  <span class="hljs-comment"># 获取账户名为 user 的过期时间</span><br>  user_expire_date=$(chage -l <span class="hljs-variable">$user</span> | grep <span class="hljs-string">&quot;Password expires&quot;</span> | <span class="hljs-built_in">cut</span> -d: -f2)<br>  <span class="hljs-comment"># 如果账户永不过期，返回 -1</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$user_expire_date</span>&quot;</span> = <span class="hljs-string">&quot; never&quot;</span> ]; <span class="hljs-keyword">then</span><br>    user_expire_seconds=-1<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-comment"># 否则，将过期日期转换为秒</span><br>    user_expire_seconds=$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;<span class="hljs-variable">$user_expire_date</span>&quot;</span> +%s)<br>  <span class="hljs-keyword">fi</span><br>  <span class="hljs-comment"># 将结果追加到输出文件中，指标名为 user_expire_seconds_user</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;user_expire_seconds_<span class="hljs-variable">$user</span> <span class="hljs-variable">$user_expire_seconds</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$output_file</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>这个脚本的功能是：</p><ul><li>定义一个用户列表，表示我们想要监控的账户名，用空格分隔</li><li>定义一个输出文件的路径，表示我们想要将指标数据写入到哪个 .prom 文件中，这个路径需要和 node_exporter 的 textfile 收集器的目录一致</li><li>清空输出文件的内容，避免重复或过期的数据</li><li>遍历用户列表，对每个用户执行以下操作：<ul><li>使用 <code>chage -l</code> 命令获取账户的过期日期</li><li>如果账户永不过期，返回 -1</li><li>否则，将过期日期转换为秒，表示距离 1970-01-01 00:00:00 UTC 的秒数</li><li>将结果追加到输出文件中，指标名为 user_expire_seconds_user，其中 user 是账户名，值为过期时间的秒数</li></ul></li></ul><p>我们可以将这个脚本保存为 <code>user_expire.sh</code>，并赋予执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 赋予执行权限</span><br><span class="hljs-built_in">chmod</span> +x user_expire.sh<br></code></pre></td></tr></table></figure><p>然后，我们可以手动执行这个脚本，或者使用 crontab 定时执行这个脚本，以保证输出文件中的数据是最新的。例如，我们可以每分钟执行一次这个脚本，可以编辑 crontab 文件，添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑 crontab 文件</span><br>crontab -e<br><span class="hljs-comment"># 添加如下内容，表示每分钟执行一次 user_expire.sh 脚本</span><br>* * * * * /path/to/user_expire.sh<br></code></pre></td></tr></table></figure><h4 id="配置-node-exporter-的-textfile-收集器"><a href="#配置-node-exporter-的-textfile-收集器" class="headerlink" title="配置 node_exporter 的 textfile 收集器"></a>配置 node_exporter 的 textfile 收集器</h4><p>接着，我们需要配置 node_exporter 的 textfile 收集器，让它能够读取我们生成的 .prom 文件中的指标数据。我们可以在 node_exporter 的启动参数中指定 –collector.textfile.directory&#x3D;&#x2F;var&#x2F;lib&#x2F;node_exporter&#x2F; 目录，表示 textfile 收集器会读取该目录下的所有 .prom 文件。注意，这个目录需要和我们的输出文件的路径一致。</p><h4 id="启动-node-exporter"><a href="#启动-node-exporter" class="headerlink" title="启动 node_exporter"></a>启动 node_exporter</h4><p>最后，我们可以启动 node_exporter，让它开始暴露主机的指标数据，包括我们自定义的账户过期时间指标。我们可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动 node_exporter，指定 textfile 收集器的目录</span><br>node_exporter --collector.textfile.directory=/var/lib/node_exporter/<br></code></pre></td></tr></table></figure><p>这样，我们就可以启动 node_exporter，让它开始暴露主机的指标数据，包括我们自定义的账户过期时间指标。我们可以执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动 node_exporter，指定 textfile 收集器的目录</span><br>node_exporter --collector.textfile.directory=/var/lib/node_exporter/<br></code></pre></td></tr></table></figure><p>这样，我们就完成了 node_exporter 的配置和启动，接下来，我们需要配置 Prometheus 来抓取 node_exporter 的指标数据，并实现可视化和告警的功能。</p><p><img src="https://files.mdnice.com/user/46581/166665a8-40da-407f-ba7e-2118e95a9cf4.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/06/hello-world/"/>
    <url>/2023/12/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
